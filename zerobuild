#!/bin/sh
# POSIX comliant
#set -x

export CFLAGS='-march=native -O3 -pipe'

_CC=$(readlink -f $(which ${CC:-cc}))
echo __COMPILER__
$_CC --version

echo Detecting whether gcc or clang is under use…
case $(basename $_CC) in
	clang*)_CC=clang && CFLAGS=$CFLAGS\ -Wno-unused-command-line-argument;;
	*gcc*) _CC=gcc   ;; # Asterix at start: x86_64-linux-gnu-gcc-8
	*) echo Unsupported compiler \`$_CC\' && false
esac

echo Checking whether the compiler supports “-fstack-protector-strong”…
echo 'int main(){}' | $_CC -fsyntax-only -fstack-protector-strong -xc - \
	&& CFLAGS=$CFLAGS\ -fstack-protector-strong

[ $1 ] || echo "No argument supplied!" && false

#cd $(mktemp -d)

cd musl
./configure --prefix=/opt --enable-wrapper=$_CC
make -j`nproc` --silent install
cd -

export CC=/opt/bin/musl-$_CC

pkg=$1
#shift

wget https://raw.githubusercontent.com/concatime/zerobuild/develop/pkgs/$pkg
[ -f $pkg ] || echo "The package is not present in the repository!\n How about submitting it?" && false

do_build() {
	case $type in
		autotools|'')
			[ -f autogen.sh ] && ./autogen.sh
			./configure $args
			cat config.log
			make -j`nproc`
			make install
		;;
		cmake)
			for _p in $args; do
				opts+=\ -D$_p
			done
			cmake -GNinja $opts
			ninja
			ninja install
		;;
	esac
}

. ./$pkg
mkcd() { mkdir -p $1 && cd $1; }
#testcmd() { hash $1 2<&- || echo You should install ${2:-$1} && exit 1; }
testcmd() { hash $* 2<&-; }
dl_extract() {
	wget --directory-prefix=$1 $2 && tar xf * --strip-components=1
}

# mute $* $@
# BUILD AUTOTOOLS (make m4 autoconf automake)

echo Path:$PWD
case $type in
	autotools|'')
		hash make m4 aclocal autoheader automake autoconf
	;;
	cmake)
		hash cmake ninja 2<&- || build_cmake
	;;
	*) hash $how 2<&- || echo You should install $how
esac
case $(echo $dist | tail -c5) in
	.git) git clone $dist --single-branch --branch=${_tag:-$vers} build ;;
	gnu)
		dl_extract build "https://ftpmirror.gnu.org/$pkg/$pkg-$vers.tar.$ext" ;;
	*)  dl_extract
esac
cd build
do_build
#rm -fR $PWD
# __ENF
